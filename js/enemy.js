class Enemy extends Drawable
{

  constructor(worldSize)
  {
    super(new EnemyModel());

    this._minx = -worldSize * 0.5;
    this._maxx = worldSize * 0.5;
    this._miny = -worldSize * 0.5;
    this._maxy = worldSize * 0.5;

    this._ra = 0.007; // Rotation accel
    this._rsz = 0.0;
    this._dir = this._randomDirection();

    this._rz = Math.random() * 2.0 * Math.PI;
  }

  _randomDirection()
  {
    let r = Math.random();
    if (r < 0.1)
      return -1.0;
    else if (r > 0.9)
      return 1.0;
    else
      return 0.0;
  }

  update(delta)
  {
    let s = 425.0;

    if (this._dir == 0.0)
    {
      if (this._rsz > 0.0)
      {
        this._rsz -= this._ra;
        if (this._rsz < 0.0)
        {
          this._rsz = 0.0;
        }
      }
      else if (this._rsz < 0.0)
      {
        this._rsz += this._ra;
        if (this._rsz > 0.0)
        {
          this._rsz = 0.0;
        }
      }
    }
    else
    {
      this._rsz += this._ra * this._dir;
      this._rsz = Math.max(-1.0, Math.min(1.0, this._rsz));
    }


    this._rz += this._rsz * 5.0 * delta;
    this._ry = this._rsz * 1.7;

    this._x += Math.sin(this._rz) * s * delta;
    this._y -= Math.cos(this._rz) * s * delta;

    if (Math.random() < 0.02)
    {
      this._dir = this._randomDirection();
    }

    if (this._x < this._minx)
      this._x = this._maxx;
    if (this._x > this._maxx)
      this._x = this._minx;

    if (this._y < this._miny)
      this._y = this._maxy;
    if (this._y > this._maxy)
      this._y = this._miny;
  }

}

class EnemyModel extends Model
{

  constructor()
  {
    super('enemy');

    this._generate();
  }

  _generate()
  {
    this._initVertices(22 * 3 * 3);

    let a = [20.7766, -10.6636, 11.5047, 27.9510, -22.2752, 7.2391, 12.7744,
             -14.6223, 9.4570, 27.9510, -22.2752, 7.2391, 6.9251, -22.9658,
             10.0641, 12.7744, -14.6223, 9.4570, 27.9510, -22.2752, 7.2391,
             18.5744, -32.6574, 10.2138, 6.9251, -22.9658, 10.0641, 14.6089,
             49.5297, 10.9851, 15.8258, -23.7710, 16.3476, 34.6797, -25.3859,
             2.7602, 6.1239, -49.5297, 10.9851, 34.6797, -25.3859, 2.7602,
             15.8258, -23.7710, 16.3476, -12.7744, -14.6223, 9.4570, -27.9510,
             -22.2752, 7.2391, -20.7766, -10.6636, 11.5047, -12.7744, -14.6223,
             9.4570, -6.9251, -22.9658, 10.0641, -27.9510, -22.2752, 7.2391,
             -6.9251, -22.9658, 10.0641, -18.5744, -32.6574, 10.2138, -27.9510,
             -22.2752, 7.2391, -34.6797, -25.3859, 2.7602, -15.8258, -23.7710,
             16.3476, -14.6089, 49.5297, 10.9851, -15.8258, -23.7710, 16.3476,
             -34.6797, -25.3859, 2.7602, -6.1239, -49.5297, 10.9851, -14.7076,
             -10.6964, 9.0496, -0.0000, -2.3742, 10.2961, -0.0000, -9.9557,
             17.6194, -14.7076, -10.6964, 9.0496, -0.0000, -3.4236, 4.5814,
             -0.0000, -2.3742, 10.2961, -0.0000, -2.3742, 10.2961, 14.7076,
             -10.6964, 9.0496, -0.0000, -9.9557, 17.6194, -0.0000, -3.4236,
             4.5814, 14.7076, -10.6964, 9.0496, -0.0000, -2.3742, 10.2961,
             -0.0000, -9.9557, 17.6194, 14.7076, -10.6964, 9.0496, -0.0000,
             -26.2369, 18.2681, -14.7076, -10.6964, 9.0496, -0.0000, -9.9557,
             17.6194, -0.0000, -26.2369, 18.2681, -0.0000, -26.2369, 18.2681,
             14.7076, -10.6964, 9.0496, -0.0000, -43.0235, 13.1260, -14.7076,
             -10.6964, 9.0496, -0.0000, -43.0235, 13.1260, -0.0000, -23.1622,
             8.4202, -14.7076, -10.6964, 9.0496, -0.0000, -26.2369, 18.2681,
             -0.0000, -43.0235, 13.1260, 14.7076, -10.6964, 9.0496, -0.0000,
             -23.1622, 8.4202, -0.0000, -43.0235, 13.1260, -0.0000, -3.4236,
             4.5814, -14.7076, -10.6964, 9.0496, -0.0000, -23.1622, 8.4202,
             -0.0000, -3.4236, 4.5814, -0.0000, -23.1622, 8.4202, 14.7076,
             -10.6964, 9.0496];

    this._vertices.set(a, 0);

    // Barycentric data
    this._bCoordinates.set([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
                            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], 0);

    // Colour data
    let r = 0.8;
    let g = 0.1;
    let b = 0.1;
    this._colours.set([r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b,
                       r, g, b, r, g, b, r, g, b], 0);

  }

}